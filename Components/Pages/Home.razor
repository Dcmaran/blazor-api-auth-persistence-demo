@page "/"
@inject HttpClient HttpClient
@rendermode InteractiveServer
@inject UserState UserState

<h3>Authorization Test Page</h3>

<button @onclick="SendValidLoginPost">Enviar Valid</button>
<button @onclick="SendInvalidLoginPost">Enviar Invalid</button>

<p>@responseMessage</p>

@if (showWebView)
{
    <div style="display: flex; justify-content: center; margin-top: 20px;">
        <iframe src="/authorized" width="800" height="600" style="border: 1px solid #ccc;"></iframe>
    </div>
}

@code {
    private string? responseMessage;
    private bool showWebView = false;

    private async Task SendValidLoginPost()
    {
        AuthRequest authRequest = new AuthRequest { Username = "admin", Password = "123456" };

        Console.WriteLine(UserState.IsAuthenticated);

        HttpResponseMessage response = await HttpClient.PostAsJsonAsync("https://localhost:7076/api/login", authRequest);

        if (response.IsSuccessStatusCode)
        {
            responseMessage = await response.Content.ReadAsStringAsync();
            showWebView = true; // Exibe a WebView
        }
        else
        {
            responseMessage = $"Erro: {response.StatusCode}";
            showWebView = false;
        }
    }

    private async Task SendInvalidLoginPost()
    {
	    AuthRequest authRequest = new AuthRequest { Username = "admin", Password = "1234568" };

	    Console.WriteLine(UserState.IsAuthenticated);

	    HttpResponseMessage response = await HttpClient.PostAsJsonAsync("https://localhost:7076/api/login", authRequest);

	    if (response.IsSuccessStatusCode)
	    {
		    responseMessage = await response.Content.ReadAsStringAsync();
		    showWebView = true; // Exibe a WebView
	    }
	    else
	    {
		    responseMessage = $"Erro: {response.StatusCode}";
		    showWebView = false;
	    }
    }
}
